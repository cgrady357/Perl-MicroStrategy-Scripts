package Business::Intelligence::MicroStrategy::CommandManager::ParseLogs;

use warnings;
use strict;

=head1 NAME

Business::Intelligence::MicroStrategy::CommandManager::ParseLogs - The great new Business::Intelligence::MicroStrategy::CommandManager::ParseLogs!

=head1 VERSION

Version 0.01

=cut

our $VERSION = '0.01';


=head1 SYNOPSIS

Quick summary of what the module does.

Perhaps a little code snippet.

    use Business::Intelligence::MicroStrategy::CommandManager::ParseLogs;

    my $foo = Business::Intelligence::MicroStrategy::CommandManager::ParseLogs->new();
    ...

=head1 EXPORT

A list of functions that can be exported.  You can delete this section
if you don't export anything, such as for a purely object-oriented module.

=head1 FUNCTIONS

=head2 function1

=cut

sub parse_list_projects { 
	my ($fh_pp, @projs);
	open($fh_pp, $_[0]) or die ($!, $?);
	while(my $line = <$fh_pp>) { 
		next unless $line =~ /Project =/; 
		chomp $line; 
		(undef, my $keep) = split("= ", $line);
		$keep =~ /^(.*)\s\(Registered/;
		push @projs, $1;
	}
	close $fh_pp;
	return \@projs;
}

sub parse_project_config_properties {
	#LIST ALL PROPERTIES FOR PROJECT CONFIGURATION FROM PROJECT	
	my ($fh_pp, $meter, %names);
	open($fh_pp, $_[0]) or die ($!, $?);
	while(my $line = <$fh_pp>) { 
		next unless $line =~ /Name = (.*)|Warehouse name = (.*)/; 
		if($1) {$meter = $1; }
		if($2) {$names{$meter} = $2; }
	}
	close $fh_pp;
	return \%names;
}

sub parse_dbs {
	#LIST DBINSTANCES
	#3/18/2008 11:17:17 AM   DBInstance = DH_WORK_TBLS (NCO Projects)
	my ($fh_pp, %names);
	open($fh_pp, $_[0]) or die ($!, $?);
	while(my $line = <$fh_pp>) { 
		next unless $line =~ /DBInstance = (.*)/; 
		$names{$1}++;
	}
	close $fh_pp;
	return \%names;
}

sub parse_list_groups {
	my (@grps, %grps);
	open($fh, $out) or die ($!, $?);
	while(my $line = <$fh>) { 
		next unless $line =~ /Group/; 
		chomp $line; 
		(undef, my $grp) = split("= ", $line); 
		push @grps, $grp; 
	}
	close $fh;
	return \@grps;
}

sub parse_user_group_members {
	#LIST MEMBERS FOR USER GROUP
	while(my $line = <LIST>){ 
	  chomp $line;
	  my($tmp, $keep) = split(/\=/, $line);
	  my @users = split( /\)\,/, $keep);
	  for(@users) {/(\w+)\s+(.*)/; $usr{$1} = $2;}
	}
}

sub parse_project_config_properties {
	my $file = shift;
	my $config = {};
	my $fh;
	open($fh, $file) or die($?, $!);
	while(<$fh>){
    /Description = /   && do { ( undef, $config->{DESCRIPTION} ) = split( /=/, $_ ); };
    /Warehouse name = / && do { ( undef, $config->{WAREHOUSE} ) = split( /=/, $_ ); };
    /Project Status = /  && do { ( undef, $config->{STATUS} ) = split( /=/, $_ ); };
    /Show status = /    && do { ( undef, $config->{SHOWSTATUS} ) = split( /=/, $_ ); };
    /Status On Top = /  && do { ( undef, $config->{STATUSONTOP} ) = split( /=/, $_ ); };
    /HTML Document Directory = /
      && do { ( undef, $config->{DOCDIRECTORY} ) = split( /=/, $_ ); };
    /Maximum number of elements to display = /
      && do { ( undef, $config->{MAXNOATTRELEMS} ) = split( /=/, $_ ); };
    /Use linked Warehouse login for execution = /
      && do { ( undef, $config->{USEWHLOGINEXEC} ) = split( /=/, $_ ); };
    /Enable deleting of object dependencies = /
      && do { ( undef, $config->{ENABLEOBJECTDELETION} ) = split( /=/, $_ ); };
    /Maximum value of report execution time = /
      && do { ( undef, $config->{MAXREPORTEXECTIME} ) = split( /=/, $_ ); };
    /Maximum value of report result rows = /
      && do { ( undef, $config->{MAXNOREPORTRESULTROWS} ) = split( /=/, $_ ); };
    /Maximum value of element rows = /
      && do { ( undef, $config->{MAXNOELEMROWS} ) = split( /=/, $_ ); };
    /Maximum value  of Intermediate result rows = /
      && do { ( undef, $config->{MAXNOINTRESULTROWS} ) = split( /=/, $_ ); };
    /Maximum value of jobs per user account = /
      && do { ( undef, $config->{MAXJOBSUSERACCT} ) = split( /=/, $_ ); };
    /Maximum value of jobs per user session = /
      && do { ( undef, $config->{MAXJOBSUSERSESSION} ) = split( /=/, $_ ); };
    /Maximum value of executing jobs per user = /
      && do { ( undef, $config->{MAXEXECJOBSUSER} ) = split( /=/, $_ ); };
    /Maximum jobs per project = /
      && do { ( undef, $config->{MAXJOBSPROJECT} ) = split( /=/, $_ ); };
    /MaxUserSessionsProject = /
      && do { ( undef, $config->{MAXUSERSESSIONSPROJECT} ) = split( /=/, $_ ); };
    /Default Project Drill Map = /
      && do { ( undef, $config->{PROJDRILLMAP} ) = split( /=/, $_ ); };
    /Report Template = / && do { ( undef, $config->{REPORTTPL} ) = split( /=/, $_ ); };
    /Report Show Empty Template = /
      && do { ( undef, $config->{REPORTSHOWEMPTYTPL} ) = split( /=/, $_ ); };
    /Template Template = /
      && do { ( undef, $config->{TEMPLATETPL} ) = split( /=/, $_ ); };
    /Template Show Empty Template = /
      && do { ( undef, $config->{TEMPLATESHOWEMPTYTPL} ) = split( /=/, $_ ); };
    /Metric Template = / && do { ( undef, $config->{METRICTPL} ) = split( /=/, $_ ); };
    /Metric Show Empty Template = /
      && do { ( undef, $config->{METRICSHOWEMPTYTPL} ) = split( /=/, $_ ); };
    /Name = / && do { ( undef, $config->{PROJECT} ) = split( /=/, $_ ); };
    }
    return $config;
}


=head1 AUTHOR

Craig Grady, C<< <cgrady357 at gmail.com> >>

=head1 BUGS

Please report any bugs or feature requests to C<bug-business-intelligence-microstrategy-commandmanager-parselogs at rt.cpan.org>, or through
the web interface at L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Business-Intelligence-MicroStrategy-CommandManager-ParseLogs>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.




=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc Business::Intelligence::MicroStrategy::CommandManager::ParseLogs


You can also look for information at:

=over 4

=item * RT: CPAN's request tracker

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Business-Intelligence-MicroStrategy-CommandManager-ParseLogs>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/Business-Intelligence-MicroStrategy-CommandManager-ParseLogs>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/Business-Intelligence-MicroStrategy-CommandManager-ParseLogs>

=item * Search CPAN

L<http://search.cpan.org/dist/Business-Intelligence-MicroStrategy-CommandManager-ParseLogs>

=back


=head1 ACKNOWLEDGEMENTS


=head1 COPYRIGHT & LICENSE

Copyright 2008 Craig Grady, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


=cut

1; # End of Business::Intelligence::MicroStrategy::CommandManager::ParseLogs
